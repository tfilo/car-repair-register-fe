/* tslint:disable */
/* eslint-disable */
/**
 * Car Repair Register API
 * Evidence of customers and vehicles for small workshops.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  RepairLog,
  RepairLogCreate,
  RepairLogPagedModel,
  RepairLogUpdate,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    RepairLogFromJSON,
    RepairLogToJSON,
    RepairLogCreateFromJSON,
    RepairLogCreateToJSON,
    RepairLogPagedModelFromJSON,
    RepairLogPagedModelToJSON,
    RepairLogUpdateFromJSON,
    RepairLogUpdateToJSON,
} from '../models/index';

export interface RepairLogApiCreateRepairLogRequest {
    repairLogCreate: RepairLogCreate;
}

export interface RepairLogApiDeleteRepairLogByIdRequest {
    id: number;
}

export interface RepairLogApiFindRepairLogsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    query?: string;
    vehicleId?: number;
}

export interface RepairLogApiGetRepairLogByIdRequest {
    id: number;
}

export interface RepairLogApiUpdateRepairLogRequest {
    id: number;
    repairLogUpdate: RepairLogUpdate;
}

/**
 * 
 */
export class RepairLogApi extends runtime.BaseAPI {

    /**
     * Create new repair log.
     */
    async createRepairLogRaw(requestParameters: RepairLogApiCreateRepairLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepairLog>> {
        if (requestParameters['repairLogCreate'] == null) {
            throw new runtime.RequiredError(
                'repairLogCreate',
                'Required parameter "repairLogCreate" was null or undefined when calling createRepairLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/repair-log`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepairLogCreateToJSON(requestParameters['repairLogCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepairLogFromJSON(jsonValue));
    }

    /**
     * Create new repair log.
     */
    async createRepairLog(repairLogCreate: RepairLogCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepairLog> {
        const response = await this.createRepairLogRaw({ repairLogCreate: repairLogCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete repair log with all its records.
     */
    async deleteRepairLogByIdRaw(requestParameters: RepairLogApiDeleteRepairLogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRepairLogById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/repair-log/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete repair log with all its records.
     */
    async deleteRepairLogById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRepairLogByIdRaw({ id: id }, initOverrides);
    }

    /**
     * Find repair logs by query string, vehicleId and pageable.
     */
    async findRepairLogsRaw(requestParameters: RepairLogApiFindRepairLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepairLogPagedModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['vehicleId'] != null) {
            queryParameters['vehicleId'] = requestParameters['vehicleId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/repair-log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepairLogPagedModelFromJSON(jsonValue));
    }

    /**
     * Find repair logs by query string, vehicleId and pageable.
     */
    async findRepairLogs(page?: number, size?: number, sort?: Array<string>, query?: string, vehicleId?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepairLogPagedModel> {
        const response = await this.findRepairLogsRaw({ page: page, size: size, sort: sort, query: query, vehicleId: vehicleId }, initOverrides);
        return await response.value();
    }

    /**
     * Get repair log by id.
     */
    async getRepairLogByIdRaw(requestParameters: RepairLogApiGetRepairLogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepairLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRepairLogById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/repair-log/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepairLogFromJSON(jsonValue));
    }

    /**
     * Get repair log by id.
     */
    async getRepairLogById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepairLog> {
        const response = await this.getRepairLogByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update existing repair log.
     */
    async updateRepairLogRaw(requestParameters: RepairLogApiUpdateRepairLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepairLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRepairLog().'
            );
        }

        if (requestParameters['repairLogUpdate'] == null) {
            throw new runtime.RequiredError(
                'repairLogUpdate',
                'Required parameter "repairLogUpdate" was null or undefined when calling updateRepairLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/repair-log/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RepairLogUpdateToJSON(requestParameters['repairLogUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepairLogFromJSON(jsonValue));
    }

    /**
     * Update existing repair log.
     */
    async updateRepairLog(id: number, repairLogUpdate: RepairLogUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepairLog> {
        const response = await this.updateRepairLogRaw({ id: id, repairLogUpdate: repairLogUpdate }, initOverrides);
        return await response.value();
    }

}
