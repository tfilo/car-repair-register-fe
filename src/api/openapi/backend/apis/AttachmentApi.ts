/* tslint:disable */
/* eslint-disable */
/**
 * Car Repair Register API
 * Evidence of customers and vehicles for small workshops.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attachment,
  ErrorMessage,
} from '../models/index';
import {
    AttachmentFromJSON,
    AttachmentToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
} from '../models/index';

export interface AttachmentApiDeleteAttachmentByIdRequest {
    id: number;
}

export interface AttachmentApiDownloadAttachmentByIdRequest {
    id: number;
}

export interface AttachmentApiUploadAttachmentRequest {
    repairLogId: number;
    multipartFile: Blob;
}

/**
 * 
 */
export class AttachmentApi extends runtime.BaseAPI {

    /**
     * Delete attachment.
     */
    async deleteAttachmentByIdRaw(requestParameters: AttachmentApiDeleteAttachmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAttachmentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attachment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete attachment.
     */
    async deleteAttachmentById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttachmentByIdRaw({ id: id }, initOverrides);
    }

    /**
     * Get attachment file.
     */
    async downloadAttachmentByIdRaw(requestParameters: AttachmentApiDownloadAttachmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downloadAttachmentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attachment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get attachment file.
     */
    async downloadAttachmentById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadAttachmentByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Upload attachment.
     */
    async uploadAttachmentRaw(requestParameters: AttachmentApiUploadAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attachment>> {
        if (requestParameters['repairLogId'] == null) {
            throw new runtime.RequiredError(
                'repairLogId',
                'Required parameter "repairLogId" was null or undefined when calling uploadAttachment().'
            );
        }

        if (requestParameters['multipartFile'] == null) {
            throw new runtime.RequiredError(
                'multipartFile',
                'Required parameter "multipartFile" was null or undefined when calling uploadAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['repairLogId'] != null) {
            queryParameters['repairLogId'] = requestParameters['repairLogId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['multipartFile'] != null) {
            formParams.append('multipartFile', requestParameters['multipartFile'] as any);
        }

        const response = await this.request({
            path: `/attachment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentFromJSON(jsonValue));
    }

    /**
     * Upload attachment.
     */
    async uploadAttachment(repairLogId: number, multipartFile: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attachment> {
        const response = await this.uploadAttachmentRaw({ repairLogId: repairLogId, multipartFile: multipartFile }, initOverrides);
        return await response.value();
    }

}
