/* tslint:disable */
/* eslint-disable */
/**
 * Car Repair Register API
 * Evidence of customers and vehicles for small workshops.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  Vehicle,
  VehicleCreate,
  VehiclePagedModel,
  VehicleUpdate,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    VehicleFromJSON,
    VehicleToJSON,
    VehicleCreateFromJSON,
    VehicleCreateToJSON,
    VehiclePagedModelFromJSON,
    VehiclePagedModelToJSON,
    VehicleUpdateFromJSON,
    VehicleUpdateToJSON,
} from '../models/index';

export interface VehicleApiCreateVehicleRequest {
    vehicleCreate: VehicleCreate;
}

export interface VehicleApiDeleteVehicleByIdRequest {
    id: number;
}

export interface VehicleApiFindVehiclesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    query?: string;
    customerId?: number;
}

export interface VehicleApiGetVehicleByIdRequest {
    id: number;
}

export interface VehicleApiUpdateVehicleRequest {
    id: number;
    vehicleUpdate: VehicleUpdate;
}

/**
 * 
 */
export class VehicleApi extends runtime.BaseAPI {

    /**
     * Create new vehicle.
     */
    async createVehicleRaw(requestParameters: VehicleApiCreateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['vehicleCreate'] == null) {
            throw new runtime.RequiredError(
                'vehicleCreate',
                'Required parameter "vehicleCreate" was null or undefined when calling createVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleCreateToJSON(requestParameters['vehicleCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Create new vehicle.
     */
    async createVehicle(vehicleCreate: VehicleCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.createVehicleRaw({ vehicleCreate: vehicleCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Delete vehicle with all its records.
     */
    async deleteVehicleByIdRaw(requestParameters: VehicleApiDeleteVehicleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteVehicleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete vehicle with all its records.
     */
    async deleteVehicleById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVehicleByIdRaw({ id: id }, initOverrides);
    }

    /**
     * Find vehicles by query string, customerId and pageable.
     */
    async findVehiclesRaw(requestParameters: VehicleApiFindVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePagedModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['customerId'] != null) {
            queryParameters['customerId'] = requestParameters['customerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePagedModelFromJSON(jsonValue));
    }

    /**
     * Find vehicles by query string, customerId and pageable.
     */
    async findVehicles(page?: number, size?: number, sort?: Array<string>, query?: string, customerId?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePagedModel> {
        const response = await this.findVehiclesRaw({ page: page, size: size, sort: sort, query: query, customerId: customerId }, initOverrides);
        return await response.value();
    }

    /**
     * Get vehicle by id.
     */
    async getVehicleByIdRaw(requestParameters: VehicleApiGetVehicleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVehicleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Get vehicle by id.
     */
    async getVehicleById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.getVehicleByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update existing vehicle.
     */
    async updateVehicleRaw(requestParameters: VehicleApiUpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateVehicle().'
            );
        }

        if (requestParameters['vehicleUpdate'] == null) {
            throw new runtime.RequiredError(
                'vehicleUpdate',
                'Required parameter "vehicleUpdate" was null or undefined when calling updateVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleUpdateToJSON(requestParameters['vehicleUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Update existing vehicle.
     */
    async updateVehicle(id: number, vehicleUpdate: VehicleUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vehicle> {
        const response = await this.updateVehicleRaw({ id: id, vehicleUpdate: vehicleUpdate }, initOverrides);
        return await response.value();
    }

}
