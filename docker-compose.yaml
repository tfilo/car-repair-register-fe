services:
    db:
        image: postgres:17-alpine
        ports:
            - 5432:5432
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        environment:
            - POSTGRES_PASSWORD=pgadmin123
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U evidence']
            interval: 5s
            timeout: 5s
            retries: 10
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_data:/var/lib/postgresql/data

    keycloak:
        image: quay.io/keycloak/keycloak:26.0
        environment:
            KC_BOOTSTRAP_ADMIN_USERNAME: 'admin'
            KC_BOOTSTRAP_ADMIN_PASSWORD: 'admin123'
            KC_HOSTNAME: 'http://localhost/auth'
            KC_HTTP_RELATIVE_PATH: /auth
            KC_HTTP_ENABLED: 'true'
            KC_HEALTH_ENABLED: 'true'
            KEYCLOAK_PROXY: 'edge'
            KC_DB: 'postgres'
            KC_DB_URL: 'jdbc:postgresql://db:5432/keycloak'
            KC_DB_USERNAME: 'keycloak'
            KC_DB_PASSWORD: 'keycloak123'
        volumes:
            - ./init/evidence-realm.json:/opt/keycloak/data/import/evidence-realm.json:ro
        command:
            - 'start-dev'
            - '--import-realm'
            - '--proxy-headers forwarded'
            - '--verbose'
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /auth/health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"
                ]
            interval: 5s
            timeout: 5s
            retries: 10
        depends_on:
            db:
                condition: service_healthy
        labels:
            - traefik.enable=true
            - traefik.http.routers.keycloak.rule=PathPrefix(`/auth`)
            - traefik.http.routers.keycloak.entrypoints=web
            - traefik.http.services.keycloak.loadbalancer.server.port=8080

    backend:
        image: tfilo/car-repair-register-be:latest
        environment:
            SPRING_JPA_SHOW_SQL: true
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/evidence?currentSchema=public
            SPRING_DATASOURCE_USERNAME: evidence
            SPRING_DATASOURCE_PASSWORD: evidence123
            SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: # for local development without check for issuer
            SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/auth/realms/evidence/protocol/openid-connect/certs
            SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: 64MB
            SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: 72MB
            SERVER_PORT: 8080
            SERVER_SERVLET_CONTEXT_PATH: /api/car-repair-register
            JAVA_OPTS: '-XX:MaxDirectMemorySize=96m'
        depends_on:
            db:
                condition: service_healthy
            keycloak:
                condition: service_healthy
        labels:
            - traefik.enable=true
            - traefik.http.routers.backend.rule=PathPrefix(`/api/car-repair-register`)
            - traefik.http.routers.backend.entrypoints=web
            - traefik.http.services.backend.loadbalancer.server.port=8080

    ui:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            API_BASE_PATH: '/api/car-repair-register'
            KEYCLOAK_REALM: 'evidence'
            KEYCLOAK_CLIENT: 'evidence-public'
            KEYCLOAK_URL: 'http://localhost/auth'
            MAX_ATTACHMENT_SIZE: 67108864
        depends_on:
            backend:
                condition: service_started
        labels:
            - traefik.enable=true
            - traefik.http.routers.intranet-ui.rule=PathPrefix(`/`)
            - traefik.http.routers.intranet-ui.entrypoints=web
            - traefik.http.services.intranet-ui.loadbalancer.server.port=8080
        profiles:
            - withUI

    traefik:
        image: traefik:v2.5
        command:
            - '--api.insecure=true'
            - '--providers.docker=true'
            - '--providers.docker.exposedbydefault=false'
            - '--entrypoints.web.address=:80'
            - '--log.level=INFO'
            - '--ping=true'
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck', '--ping']
            interval: 10s
            timeout: 10s
            retries: 10
        ports:
            - 80:80
            - 8080:8080
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
    postgres_data:
